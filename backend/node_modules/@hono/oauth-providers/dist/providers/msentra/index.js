// src/providers/msentra/msentraAuth.ts
import { env } from "hono/adapter";
import { getCookie, setCookie } from "hono/cookie";
import { HTTPException as HTTPException2 } from "hono/http-exception";

// src/utils/getRandomState.ts
var rand = () => {
  return Math.random().toString(36).substr(2);
};
function getRandomState() {
  return `${rand()}-${rand()}-${rand()}`;
}

// src/providers/msentra/authFlow.ts
import { HTTPException } from "hono/http-exception";

// src/utils/objectToQuery.ts
function toQueryParams(params) {
  const elements = Object.keys(params);
  elements.forEach((element) => {
    if (params[element] === void 0) {
      delete params[element];
    }
  });
  return new URLSearchParams(params).toString();
}

// src/providers/msentra/authFlow.ts
var AuthFlow = class {
  client_id;
  client_secret;
  tenant_id;
  redirect_uri;
  code;
  token;
  scope;
  state;
  user;
  granted_scopes;
  constructor({
    client_id,
    client_secret,
    tenant_id,
    redirect_uri,
    code,
    token,
    scope,
    state
  }) {
    this.client_id = client_id;
    this.client_secret = client_secret;
    this.tenant_id = tenant_id;
    this.redirect_uri = redirect_uri;
    this.code = code;
    this.token = token;
    this.scope = scope;
    this.state = state;
    this.user = void 0;
    if (this.client_id === void 0 || this.client_secret === void 0 || this.tenant_id === void 0 || this.scope.length <= 0) {
      throw new HTTPException(400, {
        message: "Required parameters were not found. Please provide them to proceed."
      });
    }
  }
  redirect() {
    const parsedOptions = toQueryParams({
      response_type: "code",
      redirect_uri: this.redirect_uri,
      client_id: this.client_id,
      include_granted_scopes: true,
      scope: this.scope.join(" "),
      state: this.state
    });
    return `https://login.microsoft.com/${this.tenant_id}/oauth2/v2.0/authorize?${parsedOptions}`;
  }
  async getTokenFromCode() {
    const parsedOptions = toQueryParams({
      client_id: this.client_id,
      client_secret: this.client_secret,
      redirect_uri: this.redirect_uri,
      code: this.code,
      grant_type: "authorization_code"
    });
    const response = await fetch(
      `https://login.microsoft.com/${this.tenant_id}/oauth2/v2.0/token`,
      {
        method: "POST",
        headers: {
          "content-type": "application/x-www-form-urlencoded"
        },
        body: parsedOptions
      }
    ).then((res) => res.json());
    if ("error" in response) {
      throw new HTTPException(400, { message: response.error });
    }
    if ("access_token" in response) {
      this.token = {
        token: response.access_token,
        expires_in: response.expires_in,
        refresh_token: response.refresh_token
      };
      this.granted_scopes = response.scope.split(" ");
    }
  }
  async getUserData() {
    await this.getTokenFromCode();
    const response = await fetch("https://graph.microsoft.com/v1.0/me", {
      headers: {
        authorization: `Bearer ${this.token?.token}`
      }
    }).then(async (res) => res.json());
    if ("error" in response) {
      throw new HTTPException(400, { message: response.error });
    }
    if ("id" in response) {
      this.user = response;
    }
  }
};

// src/providers/msentra/msentraAuth.ts
function msentraAuth(options) {
  return async (c, next) => {
    const newState = options.state || getRandomState();
    const auth = new AuthFlow({
      client_id: options.client_id || env(c).MSENTRA_ID,
      client_secret: options.client_secret || env(c).MSENTRA_SECRET,
      tenant_id: options.tenant_id || env(c).MSENTRA_TENANT_ID,
      redirect_uri: options.redirect_uri || c.req.url.split("?")[0],
      code: c.req.query("code"),
      token: {
        token: c.req.query("access_token"),
        expires_in: Number(c.req.query("expires_in"))
      },
      scope: options.scope
    });
    if (!auth.code) {
      setCookie(c, "state", newState, {
        maxAge: 60 * 10,
        httpOnly: true,
        path: "/"
      });
      return c.redirect(auth.redirect());
    }
    if (c.req.url.includes("?")) {
      const storedState = getCookie(c, "state");
      if (c.req.query("state") !== storedState) {
        throw new HTTPException2(401);
      }
    }
    await auth.getUserData();
    c.set("token", auth.token);
    c.set("user-msentra", auth.user);
    c.set("granted-scopes", auth.granted_scopes);
    await next();
  };
}

// src/providers/msentra/refreshToken.ts
import { HTTPException as HTTPException3 } from "hono/http-exception";
async function refreshToken({
  client_id,
  client_secret,
  tenant_id,
  refresh_token
}) {
  if (!refresh_token) {
    throw new HTTPException3(400, { message: "missing refresh token" });
  }
  const params = toQueryParams({
    client_id,
    client_secret,
    refresh_token,
    grant_type: "refresh_token"
  });
  const response = await fetch(`https://login.microsoft.com/${tenant_id}/oauth2/v2.0/token`, {
    method: "POST",
    headers: {
      "content-type": "application/x-www-form-urlencoded"
    },
    body: params
  }).then((res) => res.json());
  if ("error" in response) {
    throw new HTTPException3(400, { message: response.error });
  }
  return response;
}
export {
  msentraAuth,
  refreshToken
};
